<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.UserFileDao">
    <resultMap id="userFileResult" type="UserFile">
        <id property="id" column="id"/>
        <result property="username" column="user_username"/>
        <result property="directory" column="directory"/>
        <result property="filename" column="filename"/>
        <result property="type" column="type"/>
        <result property="size" column="size"/>
        <result property="createdTime" column="created_time"/>
        <result property="userFileStatus" column="user_file_status"/>
        <result property="fileStatus" column="file_status"/>
        <result property="fileId" column="file_id"/>
    </resultMap>
    <sql id="userFileSelect">
        SELECT user_file.id, user_file.user_username, user_file.directory, user_file.filename,user_file.file_id,
               user_file.type, user_file.created_time,user_file.status AS user_file_status, file.size, file.status AS file_status
        FROM user_file
                 LEFT JOIN file on file.id = user_file.file_id
    </sql>

    <insert id="addUserFile" useGeneratedKeys="true">
        INSERT INTO user_file (user_username, directory, file_id, filename, type, created_time, status)
        VALUES (#{username}, #{directory}, #{fileId}, #{filename}, #{type}, #{createdTime},
                #{userFileStatus})
        <selectKey keyProperty="id" resultType="Integer" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <select id="findUserFiles" resultMap="userFileResult">
        <include refid="userFileSelect"/>
        <where>
            <if test="username != null">
                user_file.user_username = #{username}
            </if>
            <if test="directory != null">
                AND user_file.directory = #{directory}
            </if>
            <if test="fileId != null">
                AND user_file.file_id = #{fileId}
            </if>
            <if test="filename != null">
                AND user_file.filename = #{filename}
            </if>
            <if test="type != null">
                AND user_file.type = #{type}
            </if>
            <if test="userFileStatus != null">
                AND user_file.status = #{userFileStatus}
            </if>
            <if test="fileStatus != null">
                AND file.status = #{fileStatus}
            </if>
        </where>
    </select>
    <select id="wildcardFindUserFiles" parameterType="UserFile" resultMap="userFileResult">
        <include refid="userFileSelect"/>
        <where>
            <if test="username != null">
                user_file.user_username = #{username}
            </if>
            <if test="directory != null">
                AND user_file.directory = #{directory}
            </if>
            <if test="fileId != null">
                AND user_file.file_id = #{fileId}
            </if>
            <if test="filename != null">
                AND user_file.filename LIKE CONCAT('%',#{filename},'%')
            </if>
            <if test="type != null">
                AND user_file.type LIKE CONCAT('%',#{type},'%')
            </if>
            <if test="userFileStatus != null">
                AND user_file.status = #{userFileStatus}
            </if>
            <if test="fileStatus != null">
                AND file.status = #{fileStatus}
            </if>
        </where>
    </select>
    <select id="findUserFileById" parameterType="Integer" resultMap="userFileResult">
        <include refid="userFileSelect"/>
        WHERE user_file.id = #{id}
    </select>

    <update id="updateUserFileById">
        UPDATE user_file
        <set>
            <if test="userFile.directory != null">
                directory = #{userFile.directory},
            </if>
            <if test="userFile.fileId != null">
                file_id = #{userFile.fileId},
            </if>
            <if test="userFile.filename != null">
                filename = #{userFile.filename},
            </if>
            <if test="userFile.type != null">
                type = #{userFile.type},
            </if>
            <if test="userFile.createdTime != null">
                created_time = #{userFile.createdTime},
            </if>
            <if test="userFile.userFileStatus != null">
                status = #{userFile.userFileStatus}
            </if>
        </set>
        WHERE id = #{id}
    </update>

    <delete id="deleteUserFileById">
        DELETE FROM user_file
        WHERE id = #{id}
    </delete>
    <delete id="deleteUserFileByIds">
        DELETE FROM user_file
        WHERE id IN
        <foreach collection="userFileIds" item="userFileId" open="(" separator="," close=")">
            #{userFileId}
        </foreach>
    </delete>
</mapper>